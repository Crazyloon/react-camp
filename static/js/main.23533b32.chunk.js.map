{"version":3,"sources":["components/MovieBackdrop.jsx","components/MovieRaiting.jsx","components/MovieCard.jsx","components/MovieList.jsx","sortingFunction.js","components/FilterControls.jsx","App.js","serviceWorker.js","index.js"],"names":["MovieBackdrop","backdrop","overview","title","className","src","alt","substr","length","MovieRaiting","raiting","MovieCard","movie","vote_average","backdrop_path","release_date","MovieList","movies","map","i","style","key","sortingFunction","a","b","asc","FilterControls","onSetFilter","onSetAscending","ascending","onClick","onChange","type","value","checked","App","useState","filter","setFilter","setAscending","filteredMovies","movieData","items","item","media_type","sort","Date","getTime","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.23533b32.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nexport const MovieBackdrop = ({backdrop, overview, title}) => {\r\n  return (\r\n    <section className=\"backdrop\">\r\n      <img className=\"backdrop-image\" src={backdrop} alt={`Movie backdrop for ${title}`} />\r\n      <div className=\"overview\">\r\n        <p className=\"text\">{overview.substr(0, 300)}{overview.length > 300 ? '...' : ''}</p>\r\n      </div>\r\n    </section>\r\n  )\r\n}","import React from \"react\";\r\n\r\nexport const MovieRaiting = ({raiting}) => {\r\n  return (\r\n    <div className=\"raiting\">\r\n      <span className={raiting < 6 ? \"raiting-avg-bad\" : \"raiting-avg-good\"}>{raiting}</span>\r\n      <span className=\"raiting-total\">/10</span>\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { MovieBackdrop } from \"./MovieBackdrop\";\r\nimport { MovieRaiting } from \"./MovieRaiting\";\r\n\r\nconst baseImagePath = \"http://image.tmdb.org/t/p/w342/\";\r\nexport const MovieCard = ({ movie }) => {\r\n  return (\r\n    <div className=\"movie-card\">\r\n      <header className=\"movie-header\">\r\n        <span className=\"movie-title\">{movie.title}</span>{\" \"}\r\n        <MovieRaiting raiting={movie.vote_average} />\r\n      </header>\r\n      <MovieBackdrop\r\n        backdrop={baseImagePath + movie.backdrop_path}\r\n        overview={movie.overview}\r\n        title={movie.title}\r\n      />\r\n      <footer className=\"movie-footer\">\r\n        <small>Released: {movie.release_date}</small>\r\n      </footer>\r\n    </div>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport { MovieCard } from './MovieCard';\r\n\r\nexport const MovieList = ({movies}) => {\r\n  return (\r\n    <div className=\"movie-list\">\r\n      {movies.map((movie, i) => {\r\n        return <div className=\"card-holder\" style={{'--animation-order': i + 1}} key={i}>\r\n                 <MovieCard movie={movie} />\r\n               </div>\r\n        }\r\n      )}\r\n    </div>\r\n  )\r\n}","export const sortingFunction = function (a, b, asc = true) {\r\n  if (a < b) {\r\n    return asc ? -1 : 1;\r\n  }\r\n\r\n  if (a > b) {\r\n    return asc ? 1 : -1;\r\n  }\r\n\r\n  return 0;\r\n};","import React from \"react\";\r\n\r\nexport const FilterControls = ({onSetFilter, onSetAscending, ascending}) => {\r\n  return (\r\n    <div className=\"filter-controls\">\r\n      <p>Filters:</p>\r\n      <button\r\n        onClick={() => onSetFilter(\"alphabetical\")}\r\n        className=\"btn btn-primary text-bold\"\r\n      >\r\n        Alphabetical\r\n      </button>\r\n      <button\r\n        onClick={() => onSetFilter(\"raiting\")}\r\n        className=\"btn btn-primary text-bold\"\r\n      >\r\n        Raiting\r\n      </button>\r\n      <button\r\n        onClick={() => onSetFilter(\"release\")}\r\n        className=\"btn btn-primary text-bold\"\r\n      >\r\n        Release Date\r\n      </button>\r\n      <label className=\"ascending-toggle\">\r\n        <span>Ascending</span>\r\n        <input\r\n          onChange={() => onSetAscending(!ascending)}\r\n          type=\"checkbox\"\r\n          value={ascending}\r\n          checked={ascending}\r\n        />\r\n      </label>\r\n    </div>\r\n  );\r\n};\r\n","import React, { useState } from \"react\";\r\nimport \"./App.css\";\r\nimport movieData from \"./movie.json\";\r\nimport { MovieList } from \"./components/MovieList\";\r\nimport { sortingFunction } from \"./sortingFunction\";\r\nimport { FilterControls } from \"./components/FilterControls\";\r\n\r\nconst App = () => {\r\n  const [filter, setFilter] = useState(\"alphabetical\");\r\n  const [ascending, setAscending] = useState(true);\r\n  const allMovies = movieData.items.filter(\r\n    (item) => item.backdrop_path && item.media_type === \"movie\"\r\n  );\r\n  const filteredMovies = allMovies.sort((a, b) => {\r\n    switch (filter) {\r\n      case \"alphabetical\":\r\n        return sortingFunction(a.title, b.title, ascending);\r\n\r\n      case \"raiting\":\r\n        return sortingFunction(a.vote_average, b.vote_average, ascending);\r\n\r\n      case \"release\":\r\n        return sortingFunction(\r\n          new Date(a.release_date).getTime(),\r\n          new Date(b.release_date).getTime(),\r\n          ascending\r\n        );\r\n\r\n      default:\r\n        return null;\r\n    }\r\n  });\r\n\r\n  return (\r\n    <div className=\"gallery\">\r\n      <FilterControls\r\n        onSetFilter={setFilter}\r\n        onSetAscending={setAscending}\r\n        ascending={ascending}\r\n      />\r\n      <MovieList movies={filteredMovies} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}